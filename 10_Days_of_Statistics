10 Days of Statistics

Day 0: Mean, Median, and Mode
n = int(input())
number_list = list(map(int, input().split()))
import numpy as np
Mean = np.mean(number_list)
Median = np.median(number_list)
from scipy import stats
Mode = int(stats.mode(number_list)[0])
print(round(Mean,1), Median, Mode, sep = '\n')


Day 0: Weighted Mean
N = input()
X = list(map(int, input().strip().split(' ')))
W = list(map(int, input().strip().split(' ')))
sum_X = sum([a*b for a,b in zip(X,W)])
print(round((sum_X/sum(W)),1))


Day 1: Quartiles
from statistics import median
n = int(input())
x = sorted(list(map(int, input().split())))
print(int(median(x[ :n//2])))
print(int(median(x)))
print(int(median(x[(n+1)//2: ])))


Day 1: Interquartile Range
n = input()
x_list = input()
x_list = [int(x) for x in x_list.split()]
freq = input()
freq = [int(x) for x in freq.split()]

new_list = []
for i in range(len(x_list)):
    for j in range(freq[i]):
        new_list.append(x_list[i])

from statistics import median
n = len(new_list)
x = sorted(new_list)    
Q1 = median(x[:n//2])
Q3 = median(x[(n+1)//2:])
print("{:.1f}".format(Q3-Q1))


Day 1: Standard Deviation
n = int(input())
numbers = list(map(int, input().split()))
mean = sum(numbers) / n
variance = sum([((x - mean) ** 2) for x in numbers]) / n
stddev = variance ** 0.5
print("{:.1f}".format(stddev))


Day 2: Basic Probability
In a single toss of 2 fair (evenly-weighted) six-sided dice, find the probability that their sum will be at most 9.
Answer: 5/6


Day 2: More Dice
In a single toss of 2 fair (evenly-weighted) six-sided dice, find the probability that the values rolled by each die will be different and the two dice have a sum of 6.
Answer: 1/9


Day 2: Compound Event Probability
There are 3 urns labeled X, Y, and Z.
Urn X contains 4 red balls and 3 black balls.
Urn Y contains 5 red balls and 4 black balls.
Urn Z contains 4 red balls and 4 black balls.
One ball is drawn from each of the 3 urns. What is the probability that, of the 3 balls drawn, 2 are red and 1 is black?
Answer: 17/42


Day 3: Conditional Probability
Suppose a family has 2 children, one of which is a boy. What is the probability that both children are boys?
Answer: 1/3


Day 3: Cards of the Same Suit
You draw 2 cards from a standard 52-card deck without replacing them. What is the probability that both cards are of the same suit?
Answer: 12/51


Day 3: Drawing Marbles
A bag contains 3 red marbles and 4 blue marbles. Then, 2 marbles are drawn from the bag, at random, without replacement. If the first marble drawn is red, what is the probability that the second marble is blue?
Answer: 2/3


Day 4: Binomial Distribution I
import math

def binomial_prob(n, p, x):
    b = (math.factorial(n)/(math.factorial(x)*math.factorial(n-x)))*(p**x)*((1-p)**(n-x))
    return(b)

boy, girl = map(float, input().split())
n = 6
p = boy/(boy+girl)
b = 0
for x in range(3,7): # x=3,4,5,6
    b += binomial_prob(n, p, x)   
print("%.3f" %b)


Day 4: Binomial Distribution II
import math

def binomial_prob(n, p, x):
    b = (math.factorial(n)/(math.factorial(x)*math.factorial(n-x)))*(p**x)*((1-p)**(n-x))
    return(b)

reject_percent, n = map(float, '12 10'.split())
p = reject_percent/100
b = 0
for x in range(0,3): # x=0,1,2
    b += binomial_prob(n, p, x)   
print("%.3f" %b)
print(round(sum([binomial_prob(n, p, i) for i in range(2, 11)]), 3))  # x=2,3,4,...,10


Day 4: Geometric Distribution I
# X is a geometric random variable
# x is the number of trials required until the first success occurs
# p = probability of success in each trial = 1/3

# probability that a specified number of trials will take place before the first success occurs
# P(X = x) = (1-p)**(xâ€“1) * p   # x = 1st, 2nd, 3rd, etc
# Reference: https://www.dummies.com/education/math/business-statistics/how-to-calculate-geometric-probabilities/

def geometric_prob(p, x):
    g = (1-p)**(x-1) * p
    return(g)

numerator, denominator = map(float, input().split())
x = int(input())
p = numerator/denominator
g = geometric_prob(p, x)  
print("%.3f" %g)


Day 4: Geometric Distribution II
# probability that defect is found during the first 5 inspections, 
# ie, 1st batch defect, 2nd batch defect,.., 5th batch defect

def geometric_prob(p, x):
    g = (1-p)**(x-1) * p
    return(g)

numerator, denominator = map(float, input().split())
x = int(input())
p = numerator/denominator
g = 0
for i in range(1,6): # i=1,2,3,4,5
    g += geometric_prob(p, i)   
print("%.3f" %g)


