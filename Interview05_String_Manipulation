## Interview Preparation Kit
## String Manipulation



## Strings: Making Anagrams
#!/bin/python3
import math
import os
import random
import re
import sys

#Complete the makeAnagram function below.
from collections import Counter
def makeAnagram(a, b):
    a = Counter(a)
    b = Counter(b)
    intersection = a & b
    a_removal = a - intersection
    b_removal = b - intersection
    result = sum(a_removal.values()) + sum(b_removal.values())
    return result

# # Option 2
# from collections import Counter
# def makeAnagram(a, b):
#     #Counter for each string
#     dict_a, dict_b = Counter(a), Counter(b) 
#     #Counter for letters in 'a' and not in 'b' and viceversa
#     letters_removed = (dict_a-dict_b) + (dict_b-dict_a)
#     #Sum the occurrence of each extra letter
#     return sum(letters_removed.values())

# # Option 3
# def makeAnagram(a, b):
#     counter = 0
#     for i in range(len(a)):
#         t = a[i+1:].count(a[i])
#         if a[i] not in b:
#             counter += 1
#         else: 
#             if t >= b.count(a[i]):
#                 counter += 1
#     for i in range(len(b)):
#         t = b[i+1:].count(b[i])
#         if b[i] not in a:
#             counter += 1
#         else:
#             if t >= a.count(b[i]):
#                 counter += 1
#     return counter

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    a = input()
    b = input()
    res = makeAnagram(a, b)
    fptr.write(str(res) + '\n')
    fptr.close()



## Alternating Characters
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the alternatingCharacters function below.
# Option 1
def alternatingCharacters(s):
    c = 0   # count
    for i in range(len(s)-1):
        if s[i]==s[i+1]:
            c += 1
    return c

# Option 2
def alternatingCharacters(s):
    return len([i for i in range(len(s)-1) if s[i]==s[i+1]])
    
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input())
    for q_itr in range(q):
        s = input()
        result = alternatingCharacters(s)
        fptr.write(str(result) + '\n')
    fptr.close()



## Sherlock and the Valid String
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the isValid function below.
# Option 1
from collections import Counter
def isValid(s):
    freq_list = list(Counter(s).values())
    first = freq_list[0]
    flag = 0
    for i in range(1, len(freq_list)):   
        if(abs(freq_list[i] - first) >= 1):
            flag += 1
    if flag > 1:
        return 'NO'
    else:
        return 'YES'

# Option 2
from collections import Counter
def isValid(s):
    char_dict = Counter(s)
    c = 0
    for char in s:
        if char not in char_dict:
            char_dict[char] = 1
        else:
            char_dict[char] += 1
    current_value = 0
    previous_value = 0
    for index, key in enumerate(char_dict):
        current_value = char_dict[key]
        if index == 0:
            previous_value = char_dict[key]
        if abs(current_value - previous_value) >= 1:
            c += 1
        if c > 1:
            return 'NO'
    return 'YES'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    s = input()
    result = isValid(s)
    fptr.write(result + '\n')
    fptr.close()











## end ##

