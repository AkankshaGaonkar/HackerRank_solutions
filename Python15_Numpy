## Python
## Numpy


## Arrays
import numpy

# # Option 1:
# def arrays(arr):
#     return(numpy.array(arr[::-1], float))

# Option 2:
def arrays(arr):
    arr.reverse()
    arr_new = numpy.array(arr, float)
    return arr_new

arr = input().strip().split(' ')
result = arrays(arr)
print(result)


## Shape and Reshape
# # Option 1
# import numpy as np
# print(np.array(input().split(),int).reshape(3,3))

# # Option 2
# import numpy as np
# arr = np.array(list(map(int, input().split())))
# arr.shape = (3,3)
# print(arr)

# Option 3
import numpy as np
arr = np.array(list(map(int, input().split())))
arr = np.array(arr).reshape(3,3)
print(arr)


## Transpose and Flatten
# # Option 1
# import numpy as np
# row, col = map(int, input().split())
# arr = np.array([input().split() for _ in range(row)], int)
# print (arr.transpose())
# print (arr.flatten())

# Option 2
import numpy as np
row, col = map(int, input().split())
arr = []
for _ in range(row):
    inp = [input().split()]
    arr.extend(inp)
arr = np.array(arr, int)
print (arr.transpose())
print (arr.flatten())


## Concatenate
# Option 1
import numpy as np
n, m, p = map(int,input().split())
arr1 = np.array([input().split() for _ in range(n)], int)
arr2 = np.array([input().split() for _ in range(m)], int)
print(np.concatenate( (arr1, arr2), axis=0) )

# # Option 2
# import numpy as np
# n, m, p = map(int, input().split())
# arr = np.array([input().split() for _ in range(n+m)], int)
# print(arr)


## Zeros and Ones
import numpy as np
nums = tuple(map(int, input().split()))
print (np.zeros(nums, dtype = np.int))
print (np.ones(nums, dtype = np.int))







## end ##
