## Python
## Collections


## collections.Counter()
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option with Counter
# from collections import Counter
# X = int(input())
# input_list = list(map(int, input().split()))
# sizes_counter = Counter(input_list)
# N = int(input())
# sales = 0
# for _ in range(N):
#     size, price = map(int, input().split())
#     if sizes_counter[size] > 0:
#         sales += price
#         sizes_counter[size] -= 1
# print(sales)

# Option without Counter
X = int(input())
sizes_list = list(map(int, input().split()))
N = int(input())
sales = 0
for _ in range(N):
    size, price = map(int, input().split())
    if size in sizes_list:
        sales += price
        sizes_list.remove(size)
print(sales)


## DefaultDict Tutorial
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option 1
# from collections import defaultdict
# n, m = map(int, input().split())
# A = defaultdict(list)
# for i in range(n):
#     A[input()].append(i+1)
# B = [input() for _ in range(m)]
# [print(*A.get(letter, [-1])) for letter in B]

# # Option 2
# from collections import defaultdict
# A = defaultdict(list)
# B = []
# n, m = map(int, input().split())
# for i in range(n):
#     A[input()].append(i+1) 
# for _ in range(m):
#     B.append(input())    # or B += [input()]
# for word in B:
#     if word in A:
#         print(' '.join( map(str, A[word]) ))
#     else:
#         print(-1)

# Option 3
from collections import defaultdict
A = defaultdict(list)
n, m = map(int, input().split())
for i in range(n):
    A[input()].append(i+1) 
for _ in range(m):
    word = input()
    if word in A: 
        print(' '.join( map(str, A[word]) ))
    else: 
        print(-1)

# # Option 4
# from collections import defaultdict
# n, m = map(int, input().split())
# A = defaultdict(lambda: -1)
# for i in range(1, n+1): 
#     word = input()
#     A[word] = A[word] + ' ' + str(i) if word in A else str(i)
# for _ in range(m):
#     print(A[input()])


## Collections.namedtuple()
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option 1
# from collections import namedtuple
# n = int(input())
# Report = namedtuple('Report', input())
# reports = [Report(*input().split()) for _ in range(n)]
# print(sum([int(e.MARKS) for e in reports])/n)

# # Option 2
# from collections import namedtuple
# n = int(input())
# categories = input().split()
# Report = namedtuple('Report', categories)
# marks = [int(Report._make(input().split()).MARKS) for x in range(n)]
# print('{: 0.2F}'.format( sum(marks)/len(marks) ))

# Option 3
from collections import namedtuple
n = int(input())
Report = namedtuple('Report', input().split())
total = 0
for _ in range(n):
    total += int(Report(*input().split()).MARKS)
print(total/n)

# # Option 4 (1 line)
# import collections, statistics
# print('%.2f' % statistics.mean(next((int(student(*row).MARKS) for row in (input().split() for i in range(size))) for size, student in [[int(input()), collections.namedtuple('Report', input())]])))







