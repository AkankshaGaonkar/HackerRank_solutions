## Ruby
## Control Structures


## Ruby Array - Initialization
• Initialize an empty array with the variable name array
Hint
array = Array.new
or
array = []
• Initialize an array with exactly one nil element in it with the variable name array_1
Hint
array_1 = Array.new(1)
or
array_1 = [nil]
• Initialize an array with exactly two elements with value 10 in it using the variable name array_2.
Hint
array_2 = Array.new(2, 10)
or
array_2 = [10, 10]

# Initialize 3 variables here as explained in the problem statement
array = []
array_1 = [nil]
array_2 = [10,10]




## Ruby Array - Index, Part 1
# The positions are 0 indexed. 

arr = [9, 5, 1, 2, 3, 4, 0, -1]
• A number which is the position of element
>>arr[4]
  => 3
or
>>arr.at(4)
  => 3 
• A range indicating the start and the end position
>>arr[1..3] # .. indicates both indices are inclusive. 
  => [5,1,2]
>>arr[1...3] # ... indicates the last index is excluded.
  => [5,1]
• Start index and the length of the range
>>arr[1,4]
  => [5, 1, 2, 3]

def element_at(arr, index)
    # return the element of the Array variable `arr` at the position `index`
    # arr.at(index) # or
    # arr[index]
    return arr[index]
end

def inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr` between the start_pos and end_pos (both inclusive)
    return arr[start_pos..end_pos]
end

def non_inclusive_range(arr, start_pos, end_pos)
    # return the elements of the Array variable `arr`, start_pos inclusive and end_pos exclusive
    return arr[start_pos...end_pos]
end

def start_and_length(arr, start_pos, length)
    # return `length` elements of the Array variable `arr` starting from `start_pos`
    return arr[start_pos, length]
end




## Ruby Array - Index, Part 2



















(work in progress)

## end ##
