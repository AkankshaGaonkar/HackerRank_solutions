## Problem Solving
## Implementation



## Grading Students
#!/bin/python3
import math
import os
import random
import re
import sys

#
# Complete the 'gradingStudents' function below.
#
# The function is expected to return an INTEGER_ARRAY.
# The function accepts INTEGER_ARRAY grades as parameter.
#
def gradingStudents(grades):
    for i in range(len(grades)):
        if grades[i] >= 38:
            difference = 5 - (grades[i] % 5)
            if difference < 3:
                grades[i] += difference
    return grades

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    grades_count = int(input().strip())
    grades = []
    for _ in range(grades_count):
        grades_item = int(input().strip())
        grades.append(grades_item)
    result = gradingStudents(grades)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## Apple and Orange
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the countApplesAndOranges function below.
def countApplesAndOranges(s, t, a, b, apples, oranges):
    print(sum([1 for x in apples if (x + a) >= s and (x + a) <= t]))
    print(sum([1 for x in oranges if (x + b) >= s and (x + b) <= t]))

if __name__ == '__main__':
    st = input().split()
    s = int(st[0])
    t = int(st[1])
    ab = input().split()
    a = int(ab[0])
    b = int(ab[1])
    mn = input().split()
    m = int(mn[0])
    n = int(mn[1])
    apples = list(map(int, input().rstrip().split()))
    oranges = list(map(int, input().rstrip().split()))
    countApplesAndOranges(s, t, a, b, apples, oranges)



## Kangaroo
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the kangaroo function below.
def kangaroo(x1, v1, x2, v2):
    if x2 >= x1 and v2 >= v1:
        return 'NO'
    if (x1 - x2) % (v2 - v1) == 0:
        return 'YES'
    else:
        return 'NO'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    x1V1X2V2 = input().split()
    x1 = int(x1V1X2V2[0])
    v1 = int(x1V1X2V2[1])
    x2 = int(x1V1X2V2[2])
    v2 = int(x1V1X2V2[3])
    result = kangaroo(x1, v1, x2, v2)
    fptr.write(result + '\n')
    fptr.close()



## Between Two Sets
#!/bin/python3
import math
import os
import random
import re
import sys

#
# Complete the 'getTotalX' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER_ARRAY a
#  2. INTEGER_ARRAY b
#
def getTotalX(a, b):
    count=0
    for num in range(max(a), max(b)+1):
        divisible1 = [True if num%x==0 else False for x in a]
        divisible2 = [True if y%num==0 else False for y in b]
        if all(divisible1) == True and all(divisible2) == True:
            count += 1
    return count

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    first_multiple_input = input().rstrip().split()
    n = int(first_multiple_input[0])
    m = int(first_multiple_input[1])
    arr = list(map(int, input().rstrip().split()))
    brr = list(map(int, input().rstrip().split()))
    total = getTotalX(arr, brr)
    fptr.write(str(total) + '\n')
    fptr.close()



## Breaking the Records
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the breakingRecords function below.
def breakingRecords(scores):
    score_high = scores[0]
    score_low = scores[0]
    count_high, count_low = 0, 0
    for score in scores:
        if score > score_high:
            score_high = score
            count_high += 1
        elif score < score_low:
            score_low = score
            count_low += 1
    return [count_high, count_low]

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    scores = list(map(int, input().rstrip().split()))
    result = breakingRecords(scores)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## Birthday Chocolate
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the birthday function below.
# Option 1
def birthday(s, d, m):
    c = 0   #count
    for i in range(len(s) - m + 1):
        sum_m = 0
        for j in range(m):
            sum_m += s[i+j]
        if sum_m == d:
            c+=1
    return c

# Option 2
def birthday(s, d, m):
    return len([1 for i in range(len(s)-m+1) if sum(s[i:i+m])==d])

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    s = list(map(int, input().rstrip().split()))
    dm = input().rstrip().split()
    d = int(dm[0])
    m = int(dm[1])
    result = birthday(s, d, m)
    fptr.write(str(result) + '\n')
    fptr.close()



## Divisible Sum Pairs
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the divisibleSumPairs function below.
# Option 1
def divisibleSumPairs(n, k, ar):
    c = 0   #count
    for i in range(n):
        for j in range(i+1 ,n):
            if (ar[i]+ar[j])%k == 0:
                c += 1
    return c

# Option 2
def divisibleSumPairs(n, k, ar):
    # Complete this function
     return sum(1 for i in range(n) for j in range(i+1 ,n) if (ar[i]+ar[j])%k == 0)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nk = input().split()
    n = int(nk[0])
    k = int(nk[1])
    ar = list(map(int, input().rstrip().split()))
    result = divisibleSumPairs(n, k, ar)
    fptr.write(str(result) + '\n')
    fptr.close()



## Migratory Birds
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the migratoryBirds function below.
import collections
def migratoryBirds(arr):
    arr = sorted(arr)
    freq = collections.Counter(arr)
    for bird, count in freq.most_common():
        return bird

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    arr_count = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = migratoryBirds(arr)
    fptr.write(str(result) + '\n')
    fptr.close()



## Day of the Programmer
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the dayOfProgrammer function below.
def dayOfProgrammer(year):
    if (year == 1918):
        return '26.09.1918'
    elif ((year<=1917) & (year%4==0))  or  ((year>1918) & (year%400==0 or ((year%4==0) & (year%100!=0)))):
        return '12.09.%s' %year
    else:
        return '13.09.%s' %year

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    year = int(input().strip())
    result = dayOfProgrammer(year)
    fptr.write(result + '\n')
    fptr.close()



## Bon AppÃ©tit
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the bonAppetit function below.
def bonAppetit(bill, k, b):
    difference = b - ((sum(bill) - bill[k])//2)
    if difference == 0:
        print("Bon Appetit")
    else:
        print(difference)

if __name__ == '__main__':
    nk = input().rstrip().split()
    n = int(nk[0])
    k = int(nk[1])
    bill = list(map(int, input().rstrip().split()))
    b = int(input().strip())
    bonAppetit(bill, k, b)



## Sock Merchant
# determine how many pairs of socks with matching colors there are
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the sockMerchant function below.
from collections import Counter
def sockMerchant(n, ar):
    total = 0
    for value in Counter(ar).values():
        total += value//2
    return total

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    ar = list(map(int, input().rstrip().split()))
    result = sockMerchant(n, ar)
    fptr.write(str(result) + '\n')
    fptr.close()



## Drawing Book
#!/bin/python3
import os
import sys

#
# Complete the pageCount function below.
#
def pageCount(n, p):
    l =[]
    front_flips = 0
    total_flips = n//2
    for page in range(0,n+1):
        if page % 2 ==0 and page !=0:
            front_flips+=1
        if page == p:
            l.append(front_flips)
            back_flips = total_flips - front_flips
            l.append(back_flips)
    return min(l)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    p = int(input())
    result = pageCount(n, p)
    fptr.write(str(result) + '\n')
    fptr.close()



## Counting Valleys
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the countingValleys function below.
def countingValleys(n, s): 
    altitude = 0 
    valleys = 0 
    for letter in s: 
        if letter == 'U': 
            altitude += 1 
        elif letter == 'D': 
            altitude -= 1 
            if altitude == -1: 
                valleys += 1 
    return valleys

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    s = input()
    result = countingValleys(n, s)
    fptr.write(str(result) + '\n')
    fptr.close()



## Electronics Shop
#!/bin/python3
import os
import sys

#
# Complete the getMoneySpent function below.
#
def getMoneySpent(keyboards, drives, b):
    leftover = []
    if min(keyboards)+min(drives) > b: 
        return(-1)
    for i in keyboards:
        for j in drives:
            if b-i-j >= 0:
                leftover.append(b-i-j)
    return(b - min(leftover))

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    bnm = input().split()
    b = int(bnm[0])
    n = int(bnm[1])
    m = int(bnm[2])
    keyboards = list(map(int, input().rstrip().split()))
    drives = list(map(int, input().rstrip().split()))
    #
    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items
    #
    moneySpent = getMoneySpent(keyboards, drives, b)
    fptr.write(str(moneySpent) + '\n')
    fptr.close()



## Cats and a Mouse
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the catAndMouse function below.
def catAndMouse(x, y, z):
    if abs(x-z) < abs(y-z):
        return 'Cat A'
    elif abs(x-z) > abs(y-z):
        return 'Cat B'
    else:
        return 'Mouse C'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input())
    for q_itr in range(q):
        xyz = input().split()
        x = int(xyz[0])
        y = int(xyz[1])
        z = int(xyz[2])
        result = catAndMouse(x, y, z)
        fptr.write(result + '\n')
    fptr.close()



## Forming a Magic Square
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the formingMagicSquare function below.
valid_squares = [
    [8, 1, 6, 3, 5, 7, 4, 9, 2],
    [6, 1, 8, 7, 5, 3, 2, 9, 4],
    [4, 9, 2, 3, 5, 7, 8, 1, 6],
    [2, 9, 4, 7, 5, 3, 6, 1, 8],
    [8, 3, 4, 1, 5, 9, 6, 7, 2],
    [4, 3, 8, 9, 5, 1, 2, 7, 6],
    [6, 7, 2, 1, 5, 9, 8, 3, 4],
    [2, 7, 6, 9, 5, 1, 4, 3, 8],
]

def formingMagicSquare(grid):
    costs = list()
    flat = [j for k in grid for j in k]
    for valid in valid_squares:
        costs.append(sum([abs(v - i) for v, i in zip(valid, flat)]))
    return min(costs)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    s = []
    for _ in range(3):
        s.append(list(map(int, input().rstrip().split())))
    result = formingMagicSquare(s)
    fptr.write(str(result) + '\n')
    fptr.close()



## Picking Numbers
#!/bin/python3
import math
import os
import random
import re
import sys

#
# Complete the 'pickingNumbers' function below.
#
# The function is expected to return an INTEGER.
# The function accepts INTEGER_ARRAY a as parameter.
#
def pickingNumbers(a):
    lengths=[]
    for num in a:
        subarray = list(filter(lambda x:x==num or x==num+1, a))
        lengths.append(len(subarray))
    return max(lengths)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    a = list(map(int, input().rstrip().split()))
    result = pickingNumbers(a)
    fptr.write(str(result) + '\n')
    fptr.close()



## Climbing the Leaderboard
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the climbingLeaderboard function below.
from collections import Counter
def climbingLeaderboard(scores, alice):
    result = []
    b = list(Counter(scores).keys())
    temp = len(b)-1
    for a in alice:
        for i in range(temp,-1,-1):
            if b[i]>a:
                result.append(i+2)
                temp = i
                break  
            elif i==0:
                result.append(1)     
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    scores_count = int(input())
    scores = list(map(int, input().rstrip().split()))
    alice_count = int(input())
    alice = list(map(int, input().rstrip().split()))
    result = climbingLeaderboard(scores, alice)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## The Hurdle Race
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the hurdleRace function below.
def hurdleRace(k, height):
    result = 0
    if max(height) >= k:
        result = max(height)-k
    else:
        result = 0
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nk = input().split()
    n = int(nk[0])
    k = int(nk[1])
    height = list(map(int, input().rstrip().split()))
    result = hurdleRace(k, height)
    fptr.write(str(result) + '\n')
    fptr.close()



## Designer PDF Viewer
#!/bin/python3
import math
import os
import random
import re
import sys

import string
def designerPdfViewer(h, word):
    alphabet = list(string.ascii_lowercase)
    ref = dict(list(zip(alphabet, h)))
    height = []
    for letter in word:
        if letter in ref:
            height.append(ref[letter])
    print(height)
    return min(height) * max(height) * len(height)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    h = list(map(int, input().rstrip().split()))
    word = input()
    result = designerPdfViewer(h, word)
    fptr.write(str(result) + '\n')
    fptr.close()



## Utopian Tree
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the utopianTree function below.
def utopianTree(n):
    if n==0: 
        return(1)
    elif n%2!=0:
        return(2*utopianTree(n-1))
    else: 
        return(utopianTree(n-1)+1)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        n = int(input())
        result = utopianTree(n)
        fptr.write(str(result) + '\n')
    fptr.close()



#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the angryProfessor function below.
# Option 1
def angryProfessor(k, a):
    count = 0
    for i in range(len(a)):
        if a[i] <= 0:
            count += 1
    if count >= k:
        return 'NO'
    else:
        return 'YES'

# Option 2
def angryProfessor(k, a):
    punctual = 0   #count
    for arrival_time in a:
        if arrival_time <= 0:
            punctual += 1
    if punctual >= k:
        return 'NO'
    else:
        return 'YES'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        nk = input().split()
        n = int(nk[0])
        k = int(nk[1])
        a = list(map(int, input().rstrip().split()))
        result = angryProfessor(k, a)
        fptr.write(result + '\n')
    fptr.close()



## Beautiful Days at the Movies
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the beautifulDays function below.
def beautifulDays(i, j, k):
    tally = 0
    for x in range(i, j+1):
        if (x - int(str(x)[::-1])) % k == 0:
            tally += 1
    return tally

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    ijk = input().split()
    i = int(ijk[0])
    j = int(ijk[1])
    k = int(ijk[2])
    result = beautifulDays(i, j, k)
    fptr.write(str(result) + '\n')
    fptr.close()



## Viral Advertising
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the viralAdvertising function below.
def viralAdvertising(n):
    likes = 0
    total = 5
    for i in range(1,n+1):
        likes += total//2
        total = (total//2 * 3)
    return likes

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    result = viralAdvertising(n)
    fptr.write(str(result) + '\n')
    fptr.close()



## Save the Prisoner!
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the saveThePrisoner function below.
def saveThePrisoner(n, m, s):
    s = s + m%n -1
    if s == 0: 
        s = n
    elif s > n : 
        s = s % n
    return s

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        nms = input().split()
        n = int(nms[0])
        m = int(nms[1])
        s = int(nms[2])
        result = saveThePrisoner(n, m, s)
        fptr.write(str(result) + '\n')
    fptr.close()



## Circular Array Rotation
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the circularArrayRotation function below.
def circularArrayRotation(a, k, queries):
    for _ in range(k):
        a.insert(0, a[-1])
        a.pop(-1)
    result = []
    for i in queries:
        result.append(a[i])
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nkq = input().split()
    n = int(nkq[0])
    k = int(nkq[1])
    q = int(nkq[2])
    a = list(map(int, input().rstrip().split()))
    queries = []
    for _ in range(q):
        queries_item = int(input())
        queries.append(queries_item)
    result = circularArrayRotation(a, k, queries)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## Sequence Equation
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the permutationEquation function below.
def permutationEquation(p):
    result = []
    for i in range(1, len(p)+1):
        px = p.index(i) + 1
        ppx = p.index(px) + 1
        result.append(ppx)
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    p = list(map(int, input().rstrip().split()))
    result = permutationEquation(p)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## Jumping on the Clouds: Revisited
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the jumpingOnClouds function below.
def jumpingOnClouds(c, k):
    e = 100
    p = 0
    while e != 0:
        p += k
        if p >= len(c) : 
            p = p%len(c)
        e = e-1 - (c[p]*2)
        if p == 0 : 
            break 
    return e

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    nk = input().split()
    n = int(nk[0])
    k = int(nk[1])
    c = list(map(int, input().rstrip().split()))
    result = jumpingOnClouds(c, k)
    fptr.write(str(result) + '\n')
    fptr.close()



## Find Digits
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the findDigits function below.
def findDigits(n):
    digit = list(str(n))
    tally = 0
    for i in range(len(digit)):
        try:
            if n % int(digit[i]) == 0:
                tally += 1
        except ZeroDivisionError:
            pass
    return tally

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    t = int(input())
    for t_itr in range(t):
        n = int(input())
        result = findDigits(n)
        fptr.write(str(result) + '\n')
    fptr.close()



## Extra Long Factorials
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the extraLongFactorials function below.
def extraLongFactorials(n):  # recursive
    if n <= 1:
        return 1
    else:
        return n * extraLongFactorials(n-1)

if __name__ == '__main__':
    n = int(input())
    print(extraLongFactorials(n))



## Append and Delete
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the appendAndDelete function below.
def appendAndDelete(s, t, k):
    ops = 0
    for i in range(max(len(s), len(t))):
        if i == min(len(s), len(t)):
            # If this statement is true, then either string s
            # equals t from 0 to i or vice-versa
            # Therefore set ops equal to difference
            # between lengths of s and t
            ops = abs(len(s) - len(t))
            break
        elif s[i] != t[i]:
            # Consider given example
            # s = hackerhappy
            # t = hackerrank
            # Statement is true when i = 6
            # 11 - 6 = 5 deletions, happy
            # 10 - 6 = 4 additions, rank
            # Total ops = 5 + 4 = 9
            ops = len(s) - i + len(t) - i
            break

    # If ops is greater than k, then the answer must be "No"
    # Else if ops is odd and k is even (i.e., ops < k),
    # there exists no combination of additional ops such that 
    # ops == k to make s == t
    if ops > k or ops % 2 == 1 and k % 2 == 0:
        return 'No'

    return 'Yes'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    s = input()
    t = input()
    k = int(input())
    result = appendAndDelete(s, t, k)
    fptr.write(result + '\n')
    fptr.close()



## Sherlock and Squares
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the squares function below.
def squares(a, b):
    lim1 = int(math.sqrt(a) // 1)
    lim2 = int(math.sqrt(b) // 1)
    sq_list = []
    for i in range(lim1, lim2+1):
        sq = i*i
        if sq >= a and sq <= b:
            sq_list.append(sq)
    return len(sq_list)

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input())
    for q_itr in range(q):
        ab = input().split()
        a = int(ab[0])
        b = int(ab[1])
        result = squares(a, b)
        fptr.write(str(result) + '\n')
    fptr.close()



## Library Fine
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the libraryFine function below.
def libraryFine(d1, m1, y1, d2, m2, y2):
    if y2 > y1:
        return 0
    if y1 > y2:
        return 10000
    if m2 > m1:
        return 0
    if m1 > m2:
        return 500 * (m1-m2)
    if d2 > d1:
        return 0
    if d1 > d2:
        return 15 * (d1 -d2)
    return 0

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    d1M1Y1 = input().split()
    d1 = int(d1M1Y1[0])
    m1 = int(d1M1Y1[1])
    y1 = int(d1M1Y1[2])
    d2M2Y2 = input().split()
    d2 = int(d2M2Y2[0])
    m2 = int(d2M2Y2[1])
    y2 = int(d2M2Y2[2])
    result = libraryFine(d1, m1, y1, d2, m2, y2)
    fptr.write(str(result) + '\n')
    fptr.close()



## Cut the sticks
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the cutTheSticks function below.
from collections import Counter
def cutTheSticks(arr):
    freq = Counter(arr)
    total_sticks = len(arr)
    result = []
    for e in sorted(set(arr)):
        result.append(total_sticks)
        if total_sticks != 0:
            total_sticks -= freq[e]
        else:
            break
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input())
    arr = list(map(int, input().rstrip().split()))
    result = cutTheSticks(arr)
    fptr.write('\n'.join(map(str, result)))
    fptr.write('\n')
    fptr.close()



## Non-Divisible Subset
#!/bin/python3
import math
import os
import random
import re
import sys

#
# Complete the 'nonDivisibleSubset' function below.
#
# The function is expected to return an INTEGER.
# The function accepts following parameters:
#  1. INTEGER k
#  2. INTEGER_ARRAY s
#
def nonDivisibleSubset(k, s):
    # Write your code here
    freq = [0]*k
    for i in range(len(s)):
        freq[s[i]%k] += 1
    if k%2 == 0:
        freq[k//2] = min(freq[k//2],1)
    result = min(freq[0],1)
    for i in range(1, k//2+1):
        result += max(freq[i],freq[k-i])
    return result

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    first_multiple_input = input().rstrip().split()
    n = int(first_multiple_input[0])
    k = int(first_multiple_input[1])
    s = list(map(int, input().rstrip().split()))
    result = nonDivisibleSubset(k, s)
    fptr.write(str(result) + '\n')
    fptr.close()
















