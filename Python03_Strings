## Python
## Strings


## sWAP cASE
def swap_case(s):
    result = ''.join([i.lower() if i.isupper() else i.upper() for i in s])
    return result

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)


## String Split and Join
def split_and_join(line):
    # write your code here
    line_list = line.split(" ")
    return "-".join(line_list)

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)


## What's Your Name?
def print_full_name(a, b):
    print("Hello", a, b, end="")
    print("! You just delved into python.")
    return

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)


## Mutations
def mutate_string(string, position, character):
    l = list(string)
    l[position] = character
    result = ''.join(l)
    return result

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)


## Find a string
def count_substring(string, sub_string):
    count = 0
    for i in range(len(string)-len(sub_string)+1):
        if string[i:i+len(sub_string)] == sub_string:
            count+=1
    return count

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)


## String Validators
if __name__ == '__main__':
    s = input()

print(any(c.isalnum() for c in s))
print(any(c.isalpha() for c in s))
print(any(c.isdigit() for c in s))
print(any(c.islower() for c in s))
print(any(c.isupper() for c in s))


## Text Alignment
#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))







