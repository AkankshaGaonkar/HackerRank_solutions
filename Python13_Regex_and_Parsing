## Python
## Regex and Parsing


## Detect Floating Point Number
"""
eg, 
4.0O0 = False (there is a letter 'O', not zero)
-1.00 = True
+4.54 = True
SomeRandomStuff = False
"""
# Enter your code here. Read input from STDIN. Print output to STDOUT
# Condensed version:
import re
for _ in range(int(input())):
    # print(bool(re.match(r'^[-+]?[0-9]*\.[0-9]+$', input())))
    # print(bool(re.search(r'^[+-]?\d{0,}\.\d{1,}$',input())))
    print(bool(re.match(r'^[-+]?\d*\.\d+$', input())))

# # Simple readable version:
# import re
# n = int(input())
# for _ in range(n):
#     str = input()
#     if (re.match(r'^[-+]?[0-9]*\.[0-9]+$', str)):
#         print(True)
#     else:
#         print(False)


## Re.split()
"""
Spliting 100,000,000.000 to 
100
000
000
000
"""
regex_pattern = r'[.,]+'	# Do not delete 'r'.
import re
print("\n".join(re.split(regex_pattern, input())))

# # Option 2
# import re
# print(*filter(None, re.split(r'[.,]+', input())), sep='\n')

# # Option 3
# import re
# print(*re.split(r'[.,]+', input().strip('., ')), sep='\n')

# # Option 4
# import re
# print(*re.split('[,.]+', input()), sep='\n')


## Group(), Groups() & Groupdict()
"""
>>> import re
>>> m = re.match(r'(\w+)@(\w+)\.(\w+)','username@hackerrank.com')
>>> m.group(0)       # The entire match 
'username@hackerrank.com'
>>> m.group(1)       # The first parenthesized subgroup.
'username'
>>> m.group(2)       # The second parenthesized subgroup.
'hackerrank'
>>> m.group(3)       # The third parenthesized subgroup.
'com'
>>> m.group(1,2,3)   # Multiple arguments give us a tuple.
('username', 'hackerrank', 'com')
>>> m.groups()
('username', 'hackerrank', 'com')

>>> m = re.match(r'(?P<user>\w+)@(?P<website>\w+)\.(?P<extension>\w+)','myname@hackerrank.com')
>>> m.groupdict()
{'website': 'hackerrank', 'user': 'myname', 'extension': 'com'}
"""
# Given string S, find the first occurrence of an alphanumeric character in S.
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option 1
# import re
# m = re.search(r'([a-zA-Z0-9])\1+', input().strip())
# print(m.group(1) if m else -1)

# # Option 2
# s=list(input())
# for i in range(len(s)):
#     try:
#         if s[i]==s[i+1]:
#             if  s[i].isalnum():
#                 print(s[i])
#                 break
#     except:
#         print("-1")

# Option 3
import re
reg = re.match(r".*?([a-zA-Z0-9]+)\1", input())
if reg:
    print(reg.group(1))
else:
    print(-1)


## Re.findall() & Re.finditer()
"""
The expression re.findall() returns all the non-overlapping matches of patterns in a string as a list of strings.
>>> import re
>>> re.findall(r'\w','http://www.hackerrank.com/')
['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']

The expression re.finditer() returns an iterator yielding MatchObject instances over all non-overlapping matches for the re pattern in the string.
>>> import re
>>> re.finditer(r'\w','http://www.hackerrank.com/')
<callable-iterator object at 0x0266C790>
>>> map(lambda x: x.group(),re.finditer(r'\w','http://www.hackerrank.com/'))
['h', 't', 't', 'p', 'w', 'w', 'w', 'h', 'a', 'c', 'k', 'e', 'r', 'r', 'a', 'n', 'k', 'c', 'o', 'm']

given a string S consisting of alphanumeric characters, spaces and symbols(+,-).
Your task is to find all the substrings of S that contains 2 or more vowels, located in between 2 consonants
eg. S = 'rabcdeefgyYhFjkIoomnpOeorteeeeet'
Output:
ee
Ioo
Oeo
eeeee
"""
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option 1
# import re
# v = 'aeiou'
# c = 'qwrtypsdfghjklzxcvbnm'
# m = re.findall(r'(?<=[%s])([%s]{2,})[%s]' % (c, v, c), input(), flags = re.I)
# print('\n'.join(m or ['-1']))

# # Option 2
# import re
# c = '[qwrtypsdfghjklzxcvbnm]'
# m = re.findall('(?<=' + c +')([aeiou]{2,})' + c, input(), re.I)
# print('\n'.join(m or ['-1']))

# # Option 3
# import re
# regex = re.findall('(?<=[^AEIOUaeiou])([AEIOUaeiou]{2,})[^AEIOUaeiou]', input().strip())
# print('\n'.join(regex) if regex else -1)

# Option 4
import re
x = input() 
v = re.findall(r'(?<=[^AEIOUaeiou])([AEIOUaeiou]{2,})[^AEIOUaeiou]', x)
y = ('\n'.join(v))
if v: 
    print(y) 
else: 
    print(-1)


## Re.start() & Re.end()
"""
These expressions return the indices of the start and end of the substring matched by the group.
>>> import re
>>> m = re.search(r'\d+','1234')
>>> m.end()
4
>>> m.start()
0

You are given a string S.
Your task is to find the indices of the start and end of string k in S.
eg. 
aaadaa
aa
Output:
(0, 1)  
(1, 2)
(4, 5)
"""
# Enter your code here. Read input from STDIN. Print output to STDOUT

# # Option 1
# S = input()
# k = input()
# import re
# pattern = re.compile(k)
# r = pattern.search(S)
# if not r: 
#     print('(-1, -1)')
# while r:
#     print('({0}, {1})'.format(r.start(), r.end() - 1))
#     r = pattern.search(S, r.start() + 1)

# Option 2
import re 
S = input()
k = input()
if re.search(k, S)==None:    # none matches
    print( (-1, -1) )
else:      # >=1 matches
    for i in range(len(S)-len(k)+1):
        if S[i:i+len(k)]==k:
            print((i, i+len(k)-1))





## end ##
