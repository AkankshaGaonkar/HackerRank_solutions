## Interview Preparation Kit
## Dictionaries and Hashmaps



##  Hash Tables: Ransom Note
def checkMagazine(magazine, note):
    if len(magazine) < len(note):
        return print('No')

    # to build a dictionary for magazine
    magazine_dict = {}
    for word in magazine:
        if word in magazine_dict:
            magazine_dict[word] += 1
        else:
            magazine_dict[word] = 1

    # unable to build note if the word from note is not in magazine_dict
    # or if there are insufficient words in the magazine_dict
    for word in note:
        if word not in magazine_dict.keys() or magazine_dict[word] == 0 :
            return print('No')
        else:
            magazine_dict[word] -= 1
    print('Yes')

if __name__ == '__main__':
    mn = input().split()
    m = int(mn[0])
    n = int(mn[1])
    magazine = input().rstrip().split()
    note = input().rstrip().split()

    checkMagazine(magazine, note)



## Two Strings
#!/bin/python3
import math
import os
import random
import re
import sys

# Complete the twoStrings function below.
# # Option 1
# def twoStrings(s1, s2):
#     return 'YES' if any([i in s2 for i in s1]) else 'NO'

# # Option 2
# def twoStrings(s1, s2): 
#     result = 'NO'
#     a = set(list(s1)) 
#     b = set(list(s2)) 
#     c = a.intersection(b) 
#     if (len(c) != 0): 
#         result = 'YES' 
#     return result

# Option 3
def twoStrings(s1, s2):
    s1 = set(s1)
    s2 = set(s2)
    for ele in s1:
        if ele in s2:
            return 'YES'
    return 'NO'

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    q = int(input())
    for q_itr in range(q):
        s1 = input()
        s2 = input()
        result = twoStrings(s1, s2)
        fptr.write(result + '\n')
    fptr.close()






## end ##
